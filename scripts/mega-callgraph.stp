// This prints the latency of the functions
// In verbose mode prints call trace with args and return values (set verbose=1)
// replace /tmp/simple with your
// program or library
//
// Run as follows: set MAXMAPENTRIES to number of probes
// sudo stap  -v -DMAXMAPENTRIES=10000 -DMAXSKIPPED=100000  mega-callgraph.stp

// Customized these variables
global verbose = 0;
// prints WATCH message when latency is >= 2 milli sec
global trigger_warn_func_avg_latency_microsec = 2000;

// running stats for function latency
global function_index_count = 0, function_index_map, function_m_n_map,
       function_m_oldM_map, function_m_newM_map, function_m_oldS_map,
       function_m_newS_map;

// Computes stats for a stream of numbers without storing them in memory
// Ref: https://www.johndcook.com/blog/standard_deviation/
function
push_running_stat_function_latency(function_name, latency) {
  // No need to have locks to access global variables;
  // in systemtap Concurrent access to global variables is automatically
  // protected with locks.
  if (latency < 0) {
    printf("-ve latency: %s", ppfunc());
  }

  index = 0;
  if (function_name in function_index_map) {
    index = function_index_map[function_name];
  }
  if (index == 0) {
    index = function_index_count++;
    function_index_map[function_name] = index;
  }
  m_n = ++function_m_n_map[index];
  if (m_n == 1) {
    function_m_oldM_map[index] = function_m_newM_map[index] = latency;
  } else {
    m_oldM = function_m_oldM_map[index];
    m_oldS = function_m_oldS_map[index];

    // this is integer calculation (no floating point supported in
    // systemtap/kernel)
    m_newM = m_oldM + (latency - m_oldM) / m_n;
    m_newS = m_oldS + (latency - m_oldM) * (latency - m_newM);

    // set up for next iteration
    m_oldM = m_newM;
    m_oldS = m_newS;

    function_m_oldM_map[index] = m_oldM;
    function_m_oldS_map[index] = m_oldS;
    function_m_newM_map[index] = m_newM;
    function_m_newS_map[index] = m_newS;
  }
}

// prints the functions stats
function print_running_stat_function_latency() {
  foreach ([function_name] in function_index_map) {
    index = function_index_map[function_name];
    count = function_m_n_map[index];
    mean = function_m_newM_map[index];
    variance = 0;
    if (count > 1) {
      variance = function_m_newS_map[index] / (count - 1);
    }

    warn_message = "";
    if (mean >= trigger_warn_func_avg_latency_microsec) {
      warn_message = " WATCH THIS";
    }
    printf("function:%s, latency microsec "
           "mean:%d, variance:%d "
           "std-dev:sqrt(%d) count:%d total:%d %s\n",
           function_name, mean, variance, variance, count, count * mean,
           warn_message);
  }
}

probe process("/tmp/simple").begin {
  delete function_index_map;
  delete function_m_n_map;
  delete function_m_oldM_map;
  delete function_m_oldM_map;
  delete function_m_oldS_map;
  delete function_m_newS_map;
}

//probe process("/tmp/simple").function("*").call
probe process("/tmp/simple").function("f4")
{
  if (verbose) {
    indent = thread_indent_depth(1);
    for (count = 0; count < indent; count++)
      printf(" ");
    printf("->%s %s\n", ppfunc(), $$parms$$);
  }
}

// probe process("/tmp/simple").function("*").return
probe process("/tmp/simple").function("f4").return
{

  latency = 0;

  // collect the latency of the method
  latency = gettimeofday_ns() - @entry(gettimeofday_ns());
  latency = latency / 1000; // micro seconds
  push_running_stat_function_latency(ppfunc(), latency);

  if (verbose) {
    indent = thread_indent_depth(-1);
    for (count = 0; count < indent; count++) {
      printf(" ");
    }
    printf("<-%s %s latency:%d micro sec tid:%d cpu:%d\n", ppfunc(), $$return,
           latency, tid(), cpu());
  }
}

probe end, process("/tmp/simple").end {
  print_running_stat_function_latency();
}
